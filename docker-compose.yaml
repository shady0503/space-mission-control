version: "3.8"

networks:
  micro:

volumes:
  kafka_data:
  auth_data:
  entreprise_data:
  mission_data:
  spacecraft_data:
  telemetry_data:

services:
  # Zookeeper & Kafka (unchanged)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - micro

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - micro

  # Auth Service DB
  postgres-auth:
    image: postgres:14
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      - micro

  # Auth Service
  auth-service:
    build:
      context: .                  # ← use repo root (where Dockerfile lives)
      dockerfile: Dockerfile
      target: auth-runtime        # ← pick the auth-runtime stage
    ports:
      - "8081:8080"
    depends_on:
      - postgres-auth
      - kafka
    # mount in JUST this service’s own .env file at runtime
    volumes:
      - ./auth-service/.env:/app/.env:ro
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://postgres-auth:5432/auth_db
      SPRING_DATASOURCE_USERNAME: auth_user
      SPRING_DATASOURCE_PASSWORD: auth_pass
      KAFKA_BOOTSTRAP_SERVERS:    kafka:9092
    networks:
      - micro

  # Entreprise Service DB
  postgres-entreprise:
    image: postgres:17
    environment:
      POSTGRES_DB: entreprise_db
      POSTGRES_USER: entreprise_user
      POSTGRES_PASSWORD: entreprise_pass
    volumes:
      - entreprise_data:/var/lib/postgresql/data
    networks:
      - micro

  # Entreprise Service
  entreprise:
    build:
      context: .
      dockerfile: Dockerfile
      target: entreprise-runtime
    ports:
      - "8082:8080"
    depends_on:
      - postgres-entreprise
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://postgres-entreprise:5432/entreprise_db
      SPRING_DATASOURCE_USERNAME: entreprise_user
      SPRING_DATASOURCE_PASSWORD: entreprise_pass
    networks:
      - micro

  # Mission Service DB
  postgres-mission:
    image: postgres:17
    environment:
      POSTGRES_DB: mission_db
      POSTGRES_USER: mission_user
      POSTGRES_PASSWORD: mission_pass
    volumes:
      - mission_data:/var/lib/postgresql/data
    networks:
      - micro

  # Mission Service
  mission-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: mission-runtime
    ports:
      - "8083:8080"
    depends_on:
      - postgres-mission
      - kafka
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://postgres-mission:5432/mission_db
      SPRING_DATASOURCE_USERNAME: mission_user
      SPRING_DATASOURCE_PASSWORD: mission_pass
      KAFKA_BOOTSTRAP_SERVERS:    kafka:9092
    networks:
      - micro

  # Spacecraft Service DB
  postgres-spacecraft:
    image: postgres:17
    environment:
      POSTGRES_DB: spacecraft_db
      POSTGRES_USER: spacecraft_user
      POSTGRES_PASSWORD: spacecraft_pass
    volumes:
      - spacecraft_data:/var/lib/postgresql/data
    networks:
      - micro

  # Spacecraft Service
  spacecraft:
    build:
      context: .
      dockerfile: Dockerfile
      target: spacecraft-runtime
    ports:
      - "8084:8080"
    depends_on:
      - postgres-spacecraft
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://postgres-spacecraft:5432/spacecraft_db
      SPRING_DATASOURCE_USERNAME: spacecraft_user
      SPRING_DATASOURCE_PASSWORD: spacecraft_pass
    networks:
      - micro

  # Telemetry Service DB
  postgres-telemetry:
    image: timescale/timescaledb:latest-pg17
    environment:
      POSTGRES_DB: telemetry_db
      POSTGRES_USER: telemetry_user
      POSTGRES_PASSWORD: telemetry_pass
    volumes:
      - telemetry_data:/var/lib/postgresql/data
    networks:
      - micro

  # Telemetry Service
  telemetry:
    build:
      context: .
      dockerfile: Dockerfile
      target: telemetry-runtime
    ports:
      - "8085:8080"
    depends_on:
      - postgres-telemetry
      - kafka
    networks:
      - micro
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: dashboard-runtime
    ports:
      - "8086:8080"
    depends_on:
      - auth-service
      - entreprise
      - mission-service
      - spacecraft
      - telemetry
    env_file:
      - ./dashboard/.env
    networks:
      - micro

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: gateway-runtime
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - entreprise
      - mission-service
      - spacecraft
      - telemetry
      - dashboard
    networks:
      - micro
