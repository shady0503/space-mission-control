
services:
  telemetry-db:
    image: timescale/timescaledb:latest-pg17
    environment:
      POSTGRES_DB:       telemetry_db
      POSTGRES_USER:     telemetry_user
      POSTGRES_PASSWORD: telemetry_pass
    ports:
      - "5436:5432"
    volumes:
      - telemetry-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetry_user -d telemetry_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  timescale-init:
    image: timescale/timescaledb:2.11.2-pg15
    depends_on:
      telemetry-db:
        condition: service_healthy
    entrypoint: >
      bash -c "
        until pg_isready -h telemetry-db -U telemetry_user -d telemetry_db; do sleep 1; done;
        psql postgresql://telemetry_user:telemetry_pass@telemetry-db:5432/telemetry_db \
          -c 'CREATE EXTENSION IF NOT EXISTS timescaledb;' &&
        psql postgresql://telemetry_user:telemetry_pass@telemetry-db:5432/telemetry_db \
          -c \"SELECT create_hypertable('trajectory_data','timestamp', if_not_exists => TRUE);\" 
      "
    restart: "no"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME:   2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID:                1
      KAFKA_ZOOKEEPER_CONNECT:       zookeeper:2181

      # Listen on all interfaces
      KAFKA_LISTENERS:               PLAINTEXT://0.0.0.0:9092
      # Advertise as localhost so host-side apps (IntelliJ/Spring Boot) can resolve it
      KAFKA_ADVERTISED_LISTENERS:    PLAINTEXT://localhost:9092

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE:       "true"
    ports:
      - "9092:9092"

volumes:
  telemetry-data:
